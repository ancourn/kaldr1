version: '3.8'

services:
  # Blockchain Backend (Rust)
  blockchain-backend:
    build:
      context: .
      dockerfile: blockchain-backend/Dockerfile
    container_name: quantum-dag-backend-dev
    ports:
      - "8080:8080"
      - "8999:8999"
    volumes:
      - blockchain-data:/app/data
      - ./logs:/app/logs
    environment:
      - RUST_LOG=info,debug
      - BLOCKCHAIN_PATH=/app/data
      - DATABASE_URL=sqlite:///data/blockchain.db
      - IDENTITY_STORAGE_PATH=/data/identity
      - BACKUP_DIR=/data/backups
      - RUST_BACKTRACE=1
    networks:
      - blockchain-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    profiles:
      - backend
      - full

  # Frontend (Next.js)
  blockchain-frontend:
    build:
      context: .
      dockerfile: blockchain-frontend/Dockerfile
    container_name: quantum-dag-frontend-dev
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_BACKEND_URL=http://blockchain-backend:8080
      - NEXT_PUBLIC_WS_URL=ws://blockchain-backend:8080/ws
      - NODE_ENV=development
      - NEXT_TELEMETRY_DISABLED=1
    depends_on:
      blockchain-backend:
        condition: service_healthy
    networks:
      - blockchain-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    profiles:
      - frontend
      - full

  # SQLite Database (Standalone for testing)
  sqlite:
    image: alpine:latest
    container_name: quantum-dag-sqlite-dev
    volumes:
      - ./db:/db
      - sqlite-data:/data
    command: >
      sh -c "
        apk add --no-cache sqlite &&
        mkdir -p /data &&
        if [ ! -f /data/blockchain.db ]; then
          sqlite3 /data/blockchain.db 'VACUUM;'
        fi &&
        while true; do sleep 3600; done
      "
    networks:
      - blockchain-network
    profiles:
      - database
      - full

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: quantum-dag-prometheus-dev
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    environment:
      - PROMETHEUS_CONFIG_FILE=/etc/prometheus/prometheus.yml
    depends_on:
      - blockchain-backend
    networks:
      - blockchain-network
    restart: unless-stopped
    profiles:
      - monitoring
      - full

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: quantum-dag-grafana-dev
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_SECURITY_ADMIN_USER=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/provisioning/dashboards/quantum-dag-dashboard.json
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana-dashboard.json:/etc/grafana/provisioning/dashboards/quantum-dag-dashboard.json:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - blockchain-network
    restart: unless-stopped
    profiles:
      - monitoring
      - full

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: quantum-dag-node-exporter-dev
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--no-collector.arp'
      - '--no-collector.bcache'
      - '--no-collector.bonding'
      - '--no-collector.btrfs'
      - '--no-collector.cgroups'
      - '--no-collector.conntrack'
      - '--no-collector.cpu'
      - '--no-collector.diskstats'
      - '--no-collector.edac'
      - '--no-collector.entropy'
      - '--no-collector.filefd'
      - '--no-collector.filesystem'
      - '--no-collector.hwmon'
      - '--no-collector.infiniband'
      - '--no-collector.ipvs'
      - '--no-collector.loadavg'
      - '--no-collector.mdadm'
      - '--no-collector.meminfo'
      - '--no-collector.netdev'
      - '--no-collector.netstat'
      - '--no-collector.nfs'
      - '--no-collector.nfsd'
      - '--no-collector.pressure'
      - '--no-collector.processes'
      - '--no-collector.rapl'
      - '--no-collector.schedstat'
      - '--no-collector.sockstat'
      - '--no-collector.softirqs'
      - '--no-collector.stat'
      - '--no-collector.textfile'
      - '--no-collector.thermal_zone'
      - '--no-collector.time'
      - '--no-collector.timex'
      - '--no-collector.udp_queues'
      - '--no-collector.uname'
      - '--no-collector.vmstat'
      - '--no-collector.xfs'
      - '--no-collector.zfs'
    networks:
      - blockchain-network
    restart: unless-stopped
    profiles:
      - monitoring
      - full

  # NGINX Reverse Proxy (Option 1)
  nginx:
    image: nginx:alpine
    container_name: quantum-dag-nginx-dev
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - blockchain-frontend
      - blockchain-backend
    networks:
      - blockchain-network
    restart: unless-stopped
    profiles:
      - nginx
      - full

  # Caddy Reverse Proxy (Option 2)
  caddy:
    image: caddy:2-alpine
    container_name: quantum-dag-caddy-dev
    ports:
      - "80:80"
      - "443:443"
      - "2019:2019"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy-data:/data
      - caddy-config:/config
      - ./logs/caddy:/var/log/caddy
    depends_on:
      - blockchain-frontend
      - blockchain-backend
    networks:
      - blockchain-network
    restart: unless-stopped
    profiles:
      - caddy
      - full

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: quantum-dag-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - blockchain-network
    restart: unless-stopped
    profiles:
      - cache
      - full

  # PostgreSQL for production testing (optional)
  postgres:
    image: postgres:15-alpine
    container_name: quantum-dag-postgres-dev
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=quantum_dag
      - POSTGRES_USER=quantum_user
      - POSTGRES_PASSWORD=quantum_pass
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - blockchain-network
    restart: unless-stopped
    profiles:
      - database
      - full

  # Alertmanager for alerts
  alertmanager:
    image: prom/alertmanager:latest
    container_name: quantum-dag-alertmanager-dev
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    depends_on:
      - prometheus
    networks:
      - blockchain-network
    restart: unless-stopped
    profiles:
      - monitoring
      - full

  # Jaeger for distributed tracing (optional)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: quantum-dag-jaeger-dev
    ports:
      - "16686:16686"  # UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - blockchain-network
    restart: unless-stopped
    profiles:
      - tracing
      - full

  # Development tools container
  dev-tools:
    image: alpine:latest
    container_name: quantum-dag-dev-tools
    volumes:
      - .:/workspace
    working_dir: /workspace
    command: >
      sh -c "
        apk add --no-cache curl wget jq sqlite3 &&
        echo 'Development tools container ready' &&
        while true; do sleep 3600; done
      "
    networks:
      - blockchain-network
    profiles:
      - tools
      - full

volumes:
  blockchain-data:
    driver: local
  sqlite-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  alertmanager-data:
    driver: local
  caddy-data:
    driver: local
  caddy-config:
    driver: local

networks:
  blockchain-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16