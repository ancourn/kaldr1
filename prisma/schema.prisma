// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

<<<<<<< HEAD
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  wallets   Wallet[]
  contracts Contract[]
  permissions Permission[]
  transactions Transaction[]

  @@map("users")
}

model Wallet {
  id        String   @id @default(cuid())
  address   String   @unique
  balance   Float    @default(0)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("wallets")
}

model Block {
  id          String   @id @default(cuid())
  hash        String   @unique
  previousHash String
  nonce       Int
  height      Int      @unique
  timestamp   DateTime @default(now())
  data        String
  difficulty  Int      @default(1)
  miner       String?
  reward      Float    @default(0)
  
  // Relations
  transactions Transaction[]

  @@map("blocks")
}

model Transaction {
  id            String   @id @default(cuid())
  hash          String   @unique
  blockId       String?
  fromAddress   String
  toAddress     String
  amount        Float
  fee           Float    @default(0)
  timestamp     DateTime @default(now())
  status        String   @default("pending") // pending, confirmed, failed
  gasUsed       Int      @default(0)
  gasLimit      Int      @default(21000)
  data          String?
  
  // Relations
  block         Block?   @relation(fields: [blockId], references: [id])
  user          User     @relation(fields: [fromAddress], references: [id])
  wallet        Wallet   @relation(fields: [fromAddress], references: [address])

  @@map("transactions")
}

model Contract {
  id            String   @id @default(cuid())
  address       String   @unique
  name          String
  version       String?
  bytecode      String
  abi           String
  creatorId     String
  deployedAt    DateTime @default(now())
  status        String   @default("active") // active, inactive, deprecated
  gasLimit      Int      @default(3000000)
  
  // Relations
  creator       User     @relation(fields: [creatorId], references: [id])
  functions     ContractFunction[]
  events        ContractEvent[]

  @@map("contracts")
}

model ContractFunction {
  id          String   @id @default(cuid())
  name        String
  signature   String
  inputs      String   // JSON string
  outputs     String   // JSON string
  contractId  String
  
  // Relations
  contract    Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@map("contract_functions")
}

model ContractEvent {
  id          String   @id @default(cuid())
  name        String
  signature   String
  parameters  String   // JSON string
  contractId  String
  
  // Relations
  contract    Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@map("contract_events")
}

model Registry {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  type        String   // string, number, boolean, object
  description String?
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("registry")
}

model Permission {
  id          String   @id @default(cuid())
  resource    String
  action      String
  userId      String
  granted     Boolean  @default(false)
  grantedBy   String?
  grantedAt   DateTime?
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id])

  @@unique([resource, action, userId])
  @@map("permissions")
}

model ModelHost {
  id            String   @id @default(cuid())
  name          String
  endpoint      String
  status        String   @default("inactive") // active, inactive, maintenance
  modelId       String
  version       String
  apiKeys       String   // JSON string
  rateLimit     String   // JSON string
  resources     String   // JSON string
  metrics       String   // JSON string
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("model_hosts")
}

model FineTuningJob {
  id            String   @id @default(cuid())
  baseModelId   String
  targetModelId String
  status        String   @default("pending") // pending, running, completed, failed
  progress      Float    @default(0)
  config        String   // JSON string
  dataset       String   // JSON string
  metrics       String   // JSON string
  startTime     DateTime?
  endTime       DateTime?
  error         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("fine_tuning_jobs")
}

model ModelVersion {
  id            String   @id @default(cuid())
  modelId       String
  version       String
  description   String
  status        String   @default("draft") // draft, published, deprecated
  metrics       String   // JSON string
  artifacts     String   // JSON string
  tags          String   // JSON string
  createdAt     DateTime @default(now())
  createdBy     String
  deployment    String   // JSON string

  @@map("model_versions")
}

model TestSuite {
  id            String   @id @default(cuid())
  name          String
  description   String
  version       String
  modelId       String
  category      String   // accuracy, performance, security, robustness, fairness
  status        String   @default("pending") // pending, running, completed, failed
  config        String   // JSON string
  results       String   // JSON string
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String

  @@map("test_suites")
}

model Benchmark {
  id            String   @id @default(cuid())
  name          String
  description   String
  modelId       String
  type          String   // latency, throughput, memory, accuracy, comprehensive
  status        String   @default("pending") // pending, running, completed, failed
  config        String   // JSON string
  results       String   // JSON string
  comparisons   String   // JSON string
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("benchmarks")
}

model ValidationReport {
  id            String   @id @default(cuid())
  modelId       String
  version       String
  status        String   // valid, invalid, warning
  checks        String   // JSON string
  summary       String   // JSON string
  recommendations String // JSON string
  createdAt     DateTime @default(now())

  @@map("validation_reports")
=======
// Authentication models for NextAuth.js
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(DEVELOPER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts     Account[]
  sessions     Session[]
  transactions Transaction[]
  contracts    SmartContract[]
  audits       SecurityAudit[]
  permissions  ContractPermission[]
  alerts       Alert[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Blockchain-specific models
model Block {
  id          String   @id @default(cuid())
  number      Int      @unique
  hash        String   @unique
  parentHash  String
  timestamp   DateTime
  nonce       String?
  difficulty  Int?
  gasLimit    BigInt
  gasUsed     BigInt
  size        Int?
  transactions Transaction[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([number])
  @@index([timestamp])
}

model Transaction {
  id          String           @id @default(cuid())
  hash        String           @unique
  blockNumber Int?
  blockHash   String?
  from        String
  to          String?
  value       Float            // Changed from BigDecimal to Float for SQLite compatibility
  gasPrice    BigInt
  gasLimit    BigInt
  gasUsed     BigInt?
  input       String?
  nonce       Int?
  status      TransactionStatus @default(PENDING)
  timestamp   DateTime?
  block       Block?           @relation(fields: [blockNumber], references: [number])
  userId      String?
  user        User?            @relation(fields: [userId], references: [id])
  contractId  String?
  contract    SmartContract?   @relation(fields: [contractId], references: [id])
  interactions ContractInteraction[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([from])
  @@index([to])
  @@index([status])
  @@index([timestamp])
  @@index([contractId])
}

model SmartContract {
  id          String              @id @default(cuid())
  name        String
  address     String              @unique
  bytecode    String
  abi         String              // JSON string
  version     String
  status      ContractStatus      @default(ACTIVE)
  creator     String
  type        ContractType        @default(OTHER)
  description String?
  tags        String?             // JSON array of tags
  gasUsed     BigInt?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  userId      String?
  user        User?               @relation(fields: [userId], references: [id])
  transactions Transaction[]
  interactions ContractInteraction[]
  registry     ContractRegistry?
  audits       SecurityAudit[]
  versions     ContractVersion[]
  permissions  ContractPermission[]
  metrics      MonitoringMetric[]
  tests        TestResult[]
  alerts       Alert[]

  @@index([address])
  @@index([status])
  @@index([type])
  @@index([creator])
}

model ContractInteraction {
  id          String   @id @default(cuid())
  contractId  String
  functionName String
  parameters  String   // JSON string
  result      String?  // JSON string
  gasUsed     BigInt?
  status      String   @default("pending")
  timestamp   DateTime @default(now())
  transactionId String?
  transaction Transaction? @relation(fields: [transactionId], references: [id])

  contract SmartContract @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@index([contractId])
  @@index([transactionId])
}

// Phase 6: Blockchain Integration & Contract Registry Models

model ContractRegistry {
  id               String   @id @default(cuid())
  contractId       String   @unique
  contract         SmartContract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  isPublic         Boolean  @default(true)
  verified         Boolean  @default(false)
  verificationDate DateTime?
  verifiedBy       String?
  usageCount       Int      @default(0)
  totalGasUsed     BigInt   @default(0)
  popularityScore  Float    @default(0)
  featured         Boolean  @default(false)
  category         String?  // e.g., "DeFi", "NFT", "Gaming", "Utility"
  website          String?
  socialLinks      String?  // JSON object
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([isPublic])
  @@index([verified])
  @@index([category])
  @@index([featured])
}

model SecurityAudit {
  id             String             @id @default(cuid())
  contractId     String
  contract       SmartContract      @relation(fields: [contractId], references: [id], onDelete: Cascade)
  auditType      AuditType          @default(STATIC)
  status         SecurityAuditStatus @default(PENDING)
  score          Int?               // 0-100 security score
  vulnerabilities String?           // JSON array of vulnerability objects
  recommendations String?           // JSON array of recommendations
  auditorId      String?
  auditor        User?              @relation(fields: [auditorId], references: [id])
  auditDate      DateTime           @default(now())
  report         String?            // Full audit report
  autoGenerated  Boolean            @default(false)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  @@index([contractId])
  @@index([status])
  @@index([auditType])
  @@index([score])
}

model ContractVersion {
  id           String   @id @default(cuid())
  contractId   String
  contract     SmartContract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  version      String
  bytecode     String
  abi          String   // JSON string
  changelog    String?
  deployedBy   String?
  deploymentTx String?
  isLatest     Boolean  @default(false)
  createdAt    DateTime @default(now())

  @@unique([contractId, version])
  @@index([contractId])
  @@index([isLatest])
}

model ContractPermission {
  id          String             @id @default(cuid())
  contractId  String
  contract    SmartContract      @relation(fields: [contractId], references: [id], onDelete: Cascade)
  userId      String
  user        User               @relation(fields: [userId], references: [id])
  role        ContractRole       @default(VIEWER)
  permissions String             // JSON array of specific permissions
  grantedBy   String?
  grantedAt   DateTime           @default(now())
  expiresAt   DateTime?
  isActive    Boolean            @default(true)

  @@unique([contractId, userId])
  @@index([contractId])
  @@index([userId])
  @@index([role])
}

model MonitoringMetric {
  id            String   @id @default(cuid())
  contractId    String
  contract      SmartContract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  metricType    MetricType
  value         Float
  unit          String?
  timestamp     DateTime @default(now())
  blockNumber   Int?
  additionalData String? // JSON object with additional metric data

  @@index([contractId])
  @@index([metricType])
  @@index([timestamp])
}

model TestResult {
  id            String       @id @default(cuid())
  contractId    String
  contract      SmartContract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  testName      String
  testType      TestType
  status        TestStatus   @default(PENDING)
  result        String?      // JSON result object
  score         Float?       // 0-100 test score
  gasUsed       BigInt?
  executionTime Int?         // in milliseconds
  error         String?
  testNetwork   String       @default("testnet")
  createdAt     DateTime     @default(now())

  @@index([contractId])
  @@index([testType])
  @@index([status])
  @@index([testNetwork])
}

model Alert {
  id          String      @id @default(cuid())
  contractId  String?
  contract    SmartContract? @relation(fields: [contractId], references: [id], onDelete: SetNull)
  userId      String?
  user        User?       @relation(fields: [userId], references: [id])
  type        AlertType
  severity    AlertSeverity @default(MEDIUM)
  title       String
  message     String
  isRead      Boolean     @default(false)
  isResolved  Boolean     @default(false)
  metadata    String?     // JSON object with additional alert data
  createdAt   DateTime    @default(now())
  resolvedAt  DateTime?

  @@index([contractId])
  @@index([userId])
  @@index([type])
  @@index([severity])
  @@index([isRead])
  @@index([isResolved])
}

// Enums
enum UserRole {
  DEVELOPER
  ADMIN
  AUDITOR
  VIEWER
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  FAILED
  CANCELLED
}

enum ContractStatus {
  ACTIVE
  INACTIVE
  DEPLOYING
  UPGRADING
  PAUSED
  FROZEN
}

// Phase 6 Enums
enum ContractType {
  ERC20
  ERC721
  ERC1155
  GOVERNANCE
  DEFI
  NFT_MARKETPLACE
  UTILITY
  PAYMENT
  IDENTITY
  GAMING
  OTHER
}

enum AuditType {
  STATIC
  DYNAMIC
  MANUAL
  AUTOMATED
  COMPREHENSIVE
}

enum SecurityAuditStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

enum ContractRole {
  OWNER
  DEVELOPER
  AUDITOR
  VIEWER
  ADMIN
}

enum MetricType {
  GAS_USAGE
  EXECUTION_TIME
  MEMORY_USAGE
  TRANSACTION_COUNT
  USER_COUNT
  ERROR_RATE
  PERFORMANCE_SCORE
}

enum TestType {
  UNIT
  INTEGRATION
  SECURITY
  PERFORMANCE
  FUNCTIONAL
  STRESS
  BENCHMARK
}

enum TestStatus {
  PENDING
  RUNNING
  PASSED
  FAILED
  CANCELLED
}

enum AlertType {
  DEPLOYMENT_FAILED
  HIGH_GAS_USAGE
  SECURITY_VULNERABILITY
  PERFORMANCE_DEGRADATION
  AUDIT_FAILED
  CONTRACT_FROZEN
  PERMISSION_CHANGED
  NETWORK_ISSUE
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
>>>>>>> 80450c96b3265079818c8907794a182e51f9e247
}