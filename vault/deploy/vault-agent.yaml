# KALDRIX Vault Agent Deployment
# This manifest deploys Vault Agent for automatic secret management

apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault-agent
  namespace: vault
  labels:
    app: vault-agent
    tier: security

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-agent-config
  namespace: vault
  labels:
    app: vault-agent
    tier: security
data:
  vault-agent-config.hcl: |
    auto_auth {
        method "kubernetes" {
            mount_path = "auth/kubernetes"
            config = {
                role = "kaldrix-production"
            }
        }
        
        sink "file" {
            config = {
                path = "/home/vault/.vault-token"
            }
        }
    }
    
    cache {
        use_auto_auth_token = true
    }
    
    listener "tcp" {
        address = "127.0.0.1:8100"
        tls_disable = true
    }
    
    template {
        contents = <<EOT
    {{- with secret "kv/data/kaldrix/production/database" }}
    export DB_USERNAME="{{ .Data.data.username }}"
    export DB_PASSWORD="{{ .Data.data.password }}"
    export DB_HOST="{{ .Data.data.host }}"
    export DB_PORT="{{ .Data.data.port }}"
    export DB_DATABASE="{{ .Data.data.database }}"
    {{- end }}
    EOT
        destination = "/vault/secrets/database.env"
        perms = "0640"
    }
    
    template {
        contents = <<EOT
    {{- with secret "kv/data/kaldrix/production/redis" }}
    export REDIS_PASSWORD="{{ .Data.data.password }}"
    export REDIS_HOST="{{ .Data.data.host }}"
    export REDIS_PORT="{{ .Data.data.port }}"
    {{- end }}
    EOT
        destination = "/vault/secrets/redis.env"
        perms = "0640"
    }
    
    template {
        contents = <<EOT
    {{- with secret "kv/data/kaldrix/production/jwt" }}
    export JWT_SECRET="{{ .Data.data.secret }}"
    export JWT_ALGORITHM="{{ .Data.data.algorithm }}"
    export JWT_EXPIRATION="{{ .Data.data.expiration }}"
    {{- end }}
    EOT
        destination = "/vault/secrets/jwt.env"
        perms = "0640"
    }
    
    exit_after_auth = false
    pid_file = "/var/run/vault-agent.pid"

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: vault-agent
  namespace: vault
  labels:
    app: vault-agent
    tier: security
spec:
  selector:
    matchLabels:
      app: vault-agent
      tier: security
  template:
    metadata:
      labels:
        app: vault-agent
        tier: security
      annotations:
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/agent-inject-status: "update"
        vault.hashicorp.com/role: "kaldrix-production"
        vault.hashicorp.com/agent-inject-secret-database-config: "kv/data/kaldrix/production/database"
        vault.hashicorp.com/agent-inject-secret-redis-config: "kv/data/kaldrix/production/redis"
        vault.hashicorp.com/agent-inject-secret-jwt-config: "kv/data/kaldrix/production/jwt"
        vault.hashicorp.com/agent-inject-template-database-config: |
          {{- with secret "kv/data/kaldrix/production/database" }}
          {
            "username": "{{ .Data.data.username }}",
            "password": "{{ .Data.data.password }}",
            "host": "{{ .Data.data.host }}",
            "port": "{{ .Data.data.port }}",
            "database": "{{ .Data.data.database }}"
          }
          {{- end }}
        vault.hashicorp.com/agent-inject-template-redis-config: |
          {{- with secret "kv/data/kaldrix/production/redis" }}
          {
            "password": "{{ .Data.data.password }}",
            "host": "{{ .Data.data.host }}",
            "port": "{{ .Data.data.port }}"
          }
          {{- end }}
        vault.hashicorp.com/agent-inject-template-jwt-config: |
          {{- with secret "kv/data/kaldrix/production/jwt" }}
          {
            "secret": "{{ .Data.data.secret }}",
            "algorithm": "{{ .Data.data.algorithm }}",
            "expiration": "{{ .Data.data.expiration }}"
          }
          {{- end }}
    spec:
      serviceAccountName: vault-agent
      containers:
      - name: vault-agent
        image: hashicorp/vault:1.15.0
        imagePullPolicy: IfNotPresent
        command: ["vault", "agent", "-config=/etc/vault/vault-agent-config.hcl"]
        env:
        - name: VAULT_ADDR
          value: "https://vault.vault.svc.cluster.local:8200"
        - name: VAULT_SKIP_VERIFY
          value: "true"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: vault-agent-config
          mountPath: /etc/vault
        - name: vault-secrets
          mountPath: /vault/secrets
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: vault-agent-config
        configMap:
          name: vault-agent-config
      - name: vault-secrets
        emptyDir: {}

---
# Vault Agent Injector Webhook Configuration
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: vault-agent-injector
  labels:
    app: vault-agent-injector
    tier: security
webhooks:
- name: vault-agent-injector.vault.hashicorp.com
  rules:
  - apiGroups: [""]
    apiVersions: ["v1"]
    operations: ["CREATE"]
    resources: ["pods"]
  failurePolicy: Fail
  sideEffects: None
  admissionReviewVersions: ["v1"]
  clientConfig:
    service:
      name: vault-agent-injector
      namespace: vault
      path: "/mutate"
    caBundle: ""  # This will be populated by the injector