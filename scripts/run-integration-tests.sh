#!/bin/bash

# KALDRIX Integration Test Runner
# This script runs comprehensive integration tests for the blockchain

set -e

echo "ðŸ§ª KALDRIX Integration Test Runner"
echo "=================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Test configuration
BASE_URL="http://localhost:8080"
TEST_TIMEOUT=300
LOG_FILE="integration-test.log"

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if blockchain is running
check_blockchain_status() {
    print_status "Checking blockchain status..."
    
    if curl -s -f "$BASE_URL/health" > /dev/null 2>&1; then
        print_success "Blockchain is running"
        return 0
    else
        print_error "Blockchain is not running at $BASE_URL"
        return 1
    fi
}

# Function to start blockchain if not running
start_blockchain() {
    print_status "Starting blockchain..."
    
    # Check if we're in the right directory
    if [ ! -f "Cargo.toml" ]; then
        print_error "Cargo.toml not found. Please run from project root."
        exit 1
    fi
    
    # Start the blockchain in background
    cargo run --bin api-server > blockchain.log 2>&1 &
    BLOCKCHAIN_PID=$!
    
    print_status "Waiting for blockchain to start..."
    
    # Wait for blockchain to be ready
    for i in {1..30}; do
        if curl -s -f "$BASE_URL/health" > /dev/null 2>&1; then
            print_success "Blockchain started successfully (PID: $BLOCKCHAIN_PID)"
            return 0
        fi
        sleep 1
    done
    
    print_error "Blockchain failed to start within 30 seconds"
    kill $BLOCKCHAIN_PID 2>/dev/null || true
    exit 1
}

# Function to run individual test categories
run_test_category() {
    local category=$1
    print_status "Running $category tests..."
    
    case $category in
        "integration")
            cargo test --test integration -- --nocapture
            ;;
        "unit")
            cargo test --lib -- --nocapture
            ;;
        "performance")
            cargo test --test integration performance_integration -- --nocapture
            ;;
        "security")
            cargo test --test integration security_integration -- --nocapture
            ;;
        "e2e")
            cargo test --test integration end_to_end_workflow -- --nocapture
            ;;
        *)
            print_error "Unknown test category: $category"
            return 1
            ;;
    esac
}

# Function to generate test report
generate_test_report() {
    print_status "Generating test report..."
    
    local report_file="test-report-$(date +%Y%m%d_%H%M%S).md"
    
    cat > "$report_file" << EOF
# KALDRIX Integration Test Report

**Generated:** $(date)
**Test Duration:** $TEST_TIMEOUT seconds
**Base URL:** $BASE_URL

## Test Results

### Integration Tests
$(cargo test --test integration -- --nocapture 2>&1 | grep -E "(test|failed|passed|panicked)")

### Unit Tests
$(cargo test --lib -- --nocapture 2>&1 | grep -E "(test|failed|passed|panicked)")

### Performance Tests
$(cargo test --test integration performance_integration -- --nocapture 2>&1 | grep -E "(test|failed|passed|panicked)")

### Security Tests
$(cargo test --test integration security_integration -- --nocapture 2>&1 | grep -E "(test|failed|passed|panicked)")

### End-to-End Tests
$(cargo test --test integration end_to_end_workflow -- --nocapture 2>&1 | grep -E "(test|failed|passed|panicked)")

## System Information

### Blockchain Status
$(curl -s "$BASE_URL/api/blockchain/status" | jq . 2>/dev/null || echo "Status check failed")

### System Metrics
$(curl -s "$BASE_URL/metrics" | head -20 2>/dev/null || echo "Metrics check failed")

## Test Environment

- **OS:** $(uname -a)
- **Rust Version:** $(rustc --version)
- **Cargo Version:** $(cargo --version)
- **Test Date:** $(date)

## Notes

This report was automatically generated by the KALDRIX integration test runner.
EOF

    print_success "Test report generated: $report_file"
}

# Function to cleanup
cleanup() {
    print_status "Cleaning up..."
    
    # Stop blockchain if we started it
    if [ ! -z "$BLOCKCHAIN_PID" ]; then
        kill $BLOCKCHAIN_PID 2>/dev/null || true
        print_status "Blockchain stopped"
    fi
    
    # Clean up temporary files
    rm -f test-temp-*.json
}

# Set up signal handlers
trap cleanup EXIT INT TERM

# Main execution
main() {
    print_status "Starting KALDRIX integration tests..."
    
    # Check if blockchain is running
    if ! check_blockchain_status; then
        start_blockchain
    fi
    
    # Create log file
    exec > >(tee -a "$LOG_FILE")
    exec 2>&1
    
    print_status "Running all integration tests..."
    
    # Run all test categories
    local categories=("unit" "integration" "performance" "security" "e2e")
    local failed_tests=0
    
    for category in "${categories[@]}"; do
        print_status "================================"
        print_status "Running $category tests"
        print_status "================================"
        
        if ! run_test_category "$category"; then
            print_error "$category tests failed"
            failed_tests=$((failed_tests + 1))
        else
            print_success "$category tests passed"
        fi
        
        print_status ""
    done
    
    # Generate test report
    generate_test_report
    
    # Final summary
    print_status "================================"
    print_status "Test Summary"
    print_status "================================"
    
    if [ $failed_tests -eq 0 ]; then
        print_success "All integration tests passed!"
        exit 0
    else
        print_error "$failed_tests test categories failed"
        exit 1
    fi
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --url)
            BASE_URL="$2"
            shift 2
            ;;
        --timeout)
            TEST_TIMEOUT="$2"
            shift 2
            ;;
        --category)
            run_test_category "$2"
            exit $?
            ;;
        --help|-h)
            echo "Usage: $0 [OPTIONS]"
            echo "Options:"
            echo "  --url URL         Blockchain base URL (default: http://localhost:8080)"
            echo "  --timeout SECONDS Test timeout in seconds (default: 300)"
            echo "  --category CAT    Run specific test category (unit, integration, performance, security, e2e)"
            echo "  --help, -h        Show this help message"
            exit 0
            ;;
        *)
            print_error "Unknown option: $1"
            exit 1
            ;;
    esac
done

# Run main function
main "$@"