name: Deploy Mobile Apps

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
      - develop
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      platform:
        description: 'Target platform'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - ios
        - android
      run_tests:
        description: 'Run tests before deployment'
        required: true
        default: true
        type: boolean
      clean_build:
        description: 'Clean build artifacts'
        required: true
        default: true
        type: boolean

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '17'
  FASTLANE_VERSION: '2.205.0'

jobs:
  # Check if we should deploy
  check-deploy:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
      environment: ${{ steps.check.outputs.environment }}
      platform: ${{ steps.check.outputs.platform }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check deployment conditions
      id: check
      run: |
        SHOULD_DEPLOY="false"
        ENVIRONMENT="staging"
        PLATFORM="all"
        
        # Check if it's a version tag
        if [[ "${{ github.ref_type }}" == "tag" && "${{ github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          SHOULD_DEPLOY="true"
          ENVIRONMENT="production"
          echo "Version tag detected: ${{ github.ref_name }}"
        fi
        
        # Check if it's a push to main branch
        if [[ "${{ github.ref_name }}" == "main" && "${{ github.event_name }}" == "push" ]]; then
          SHOULD_DEPLOY="true"
          ENVIRONMENT="staging"
          echo "Push to main branch detected"
        fi
        
        # Check workflow dispatch inputs
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          SHOULD_DEPLOY="true"
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          PLATFORM="${{ github.event.inputs.platform }}"
          echo "Workflow dispatch triggered"
        fi
        
        echo "should-deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
        echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
        echo "platform=$PLATFORM" >> $GITHUB_OUTPUT

  # Run tests
  test:
    runs-on: ubuntu-latest
    needs: check-deploy
    if: needs.check-deploy.outputs.should-deploy == 'true' || github.event_name == 'pull_request'
    
    strategy:
      matrix:
        test-type: [unit, integration, ui, performance]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        
    - name: Run ${{ matrix.test-type }} tests
      run: |
        npm run test:${{ matrix.test-type }}
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.test-type }}
        path: |
          test-results/
          coverage/
        retention-days: 30

  # Security scan
  security:
    runs-on: ubuntu-latest
    needs: check-deploy
    if: needs.check-deploy.outputs.should-deploy == 'true' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        
    - name: Run security audit
      run: |
        npm audit --audit-level=moderate
        
    - name: Run OWASP dependency check
      uses: dependency-check/dependency-check-action@main
      with:
        project: 'kaldrix-mobile'
        path: '.'
        format: 'HTML'
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          dependency-check-report.html
          npm-audit.json
        retention-days: 30

  # Build and deploy iOS
  deploy-ios:
    runs-on: macos-latest
    needs: [check-deploy, test, security]
    if: needs.check-deploy.outputs.should-deploy == 'true' && (needs.check-deploy.outputs.platform == 'all' || needs.check-deploy.outputs.platform == 'ios')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '14.3'
        
    - name: Set up Fastlane
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true
        working-directory: 'mobile-sdk/ios'
        
    - name: Cache iOS dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          ~/.cache/CocoaPods
        key: ${{ runner.os }}-ios-${{ hashFiles('**/Podfile.lock') }}
        
    - name: Install iOS dependencies
      run: |
        cd mobile-sdk/ios
        pod install
        
    - name: Set environment
      run: |
        if [[ "${{ needs.check-deploy.outputs.environment }}" == "production" ]]; then
          echo "FASTLANE_LANE=release" >> $GITHUB_ENV
        else
          echo "FASTLANE_LANE=beta" >> $GITHUB_ENV
        fi
        
    - name: Clean build artifacts
      if: ${{ github.event.inputs.clean_build == 'true' || needs.check-deploy.outputs.environment == 'production' }}
      run: |
        cd mobile-sdk/ios
        fastlane clean
        
    - name: Run tests
      if: ${{ github.event.inputs.run_tests == 'true' || needs.check-deploy.outputs.environment == 'production' }}
      run: |
        cd mobile-sdk/ios
        fastlane test
        
    - name: Deploy iOS app
      run: |
        cd mobile-sdk/ios
        fastlane $FASTLANE_LANE
      env:
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Upload iOS artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ios-build-artifacts
        path: |
          mobile-sdk/ios/*.ipa
          mobile-sdk/ios/*.dSYM.zip
        retention-days: 30

  # Build and deploy Android
  deploy-android:
    runs-on: ubuntu-latest
    needs: [check-deploy, test, security]
    if: needs.check-deploy.outputs.should-deploy == 'true' && (needs.check-deploy.outputs.platform == 'all' || needs.check-deploy.outputs.platform == 'android')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        
    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Set up Android SDK
      uses: android-actions/setup-android@v2
      
    - name: Set up Fastlane
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true
        working-directory: 'mobile-sdk/android'
        
    - name: Cache Android dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          ~/.android/build-cache
        key: ${{ runner.os }}-android-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        
    - name: Grant execute permission for gradlew
      run: |
        cd mobile-sdk/android
        chmod +x gradlew
        
    - name: Set environment
      run: |
        if [[ "${{ needs.check-deploy.outputs.environment }}" == "production" ]]; then
          echo "FASTLANE_LANE=release" >> $GITHUB_ENV
        else
          echo "FASTLANE_LANE=beta" >> $GITHUB_ENV
        fi
        
    - name: Clean build artifacts
      if: ${{ github.event.inputs.clean_build == 'true' || needs.check-deploy.outputs.environment == 'production' }}
      run: |
        cd mobile-sdk/android
        ./gradlew clean
        
    - name: Run tests
      if: ${{ github.event.inputs.run_tests == 'true' || needs.check-deploy.outputs.environment == 'production' }}
      run: |
        cd mobile-sdk/android
        fastlane test
        
    - name: Deploy Android app
      run: |
        cd mobile-sdk/android
        fastlane $FASTLANE_LANE
      env:
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        GOOGLE_PLAY_JSON_KEY: ${{ secrets.GOOGLE_PLAY_JSON_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Upload Android artifacts
      uses: actions/upload-artifact@v3
      with:
        name: android-build-artifacts
        path: |
          mobile-sdk/android/app/build/outputs/**/*.apk
          mobile-sdk/android/app/build/outputs/**/*.aab
        retention-days: 30

  # Generate deployment report
  generate-report:
    runs-on: ubuntu-latest
    needs: [deploy-ios, deploy-android]
    if: always() && needs.check-deploy.outputs.should-deploy == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Generate deployment report
      run: |
        ./deployment/deploy.sh --dry-run
        
    - name: Upload deployment report
      uses: actions/upload-artifact@v3
      with:
        name: deployment-report
        path: |
          deployment/logs/
          deployment/reports/
        retention-days: 90

  # Notify team
  notify:
    runs-on: ubuntu-latest
    needs: [generate-report]
    if: always() && needs.check-deploy.outputs.should-deploy == 'true'
    
    steps:
    - name: Notify team of deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#mobile-deployment'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Create GitHub release
  create-release:
    runs-on: ubuntu-latest
    needs: [deploy-ios, deploy-android]
    if: needs.check-deploy.outputs.environment == 'production' && needs.check-deploy.outputs.should-deploy == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      
    - name: Create GitHub release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: KALDRIX Mobile App Release ${{ github.ref_name }}
        body: |
          ## KALDRIX Mobile App Release ${{ github.ref_name }}
          
          This release includes:
          - **iOS App**: Available on App Store
          - **Android App**: Available on Google Play Store
          
          ### What's New
          - Complete quantum-resistant wallet functionality
          - Support for major cryptocurrencies
          - Advanced security features
          - Biometric authentication
          - Real-time transaction processing
          - Portfolio tracking and analytics
          - Staking capabilities
          - NFT management
          - Multi-wallet support
          - Comprehensive transaction history
          
          ### Installation
          - **iOS**: Download from [App Store](https://apps.apple.com/app/id1234567890)
          - **Android**: Download from [Google Play](https://play.google.com/store/apps/details?id=com.kaldrix.wallet)
          
          ### Support
          - Documentation: [KALDRIX Docs](https://docs.kaldrix.network)
          - Support: [KALDRIX Support](https://support.kaldrix.network)
          - Community: [KALDRIX Discord](https://discord.gg/kaldrix)
          
          ---
          🤖 Generated by [KALDRIX Mobile App CI/CD](https://github.com/kaldrix/kaldrix-mobile)
        files: |
          ios-build-artifacts/*.ipa
          android-build-artifacts/*.aab
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}