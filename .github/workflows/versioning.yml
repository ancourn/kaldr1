name: Semantic Versioning & Release Automation

on:
  push:
    branches: [ main ]
    paths:
      - 'openapi.yaml'
      - 'sdk/**'
      - '.github/workflows/versioning.yml'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
      prerelease:
        description: 'Mark as prerelease'
        required: false
        default: false
        type: boolean
      create_tag:
        description: 'Create git tag'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '20'

jobs:
  analyze-changes:
    name: Analyze Changes
    runs-on: ubuntu-latest
    outputs:
      has_api_changes: ${{ steps.changes.outputs.has_api_changes }}
      has_sdk_changes: ${{ steps.changes.outputs.has_sdk_changes }}
      suggested_bump: ${{ steps.changes.outputs.suggested_bump }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Analyze changes
      id: changes
      run: |
        # Get changed files
        CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
        
        HAS_API_CHANGES=false
        HAS_SDK_CHANGES=false
        SUGGESTED_BUMP="patch"
        
        echo "Changed files:"
        echo "$CHANGED_FILES"
        
        # Check for API changes
        if echo "$CHANGED_FILES" | grep -q "openapi.yaml"; then
          HAS_API_CHANGES=true
          SUGGESTED_BUMP="minor"
          echo "API specification changed"
        fi
        
        # Check for SDK changes
        if echo "$CHANGED_FILES" | grep -q "sdk/"; then
          HAS_SDK_CHANGES=true
          echo "SDK files changed"
        fi
        
        # Check for breaking changes
        if echo "$CHANGED_FILES" | grep -q "openapi.yaml" && git diff HEAD~1 HEAD -- openapi.yaml | grep -q "deprecated\|removed"; then
          SUGGESTED_BUMP="major"
          echo "Breaking changes detected"
        fi
        
        echo "has_api_changes=$HAS_API_CHANGES" >> $GITHUB_OUTPUT
        echo "has_sdk_changes=$HAS_SDK_CHANGES" >> $GITHUB_OUTPUT
        echo "suggested_bump=$SUGGESTED_BUMP" >> $GITHUB_OUTPUT

  determine-version:
    name: Determine Version
    runs-on: ubuntu-latest
    needs: analyze-changes
    outputs:
      current_version: ${{ steps.version.outputs.current_version }}
      new_version: ${{ steps.version.outputs.new_version }}
      release_type: ${{ steps.version.outputs.release_type }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Determine version
      id: version
      run: |
        # Get current version from package.json
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        
        # Determine release type
        if [ "${{ github.event.inputs.release_type }}" != "" ]; then
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
        else
          RELEASE_TYPE="${{ needs.analyze-changes.outputs.suggested_bump }}"
        fi
        
        # Calculate new version
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        
        case "$RELEASE_TYPE" in
          "major")
            NEW_VERSION="$((MAJOR + 1)).0.0"
            ;;
          "minor")
            NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
            ;;
          "patch")
            NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
            ;;
        esac
        
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
        
        echo "Current version: $CURRENT_VERSION"
        echo "New version: $NEW_VERSION"
        echo "Release type: $RELEASE_TYPE"

  update-versions:
    name: Update Version Files
    runs-on: ubuntu-latest
    needs: determine-version
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Update package.json version
      run: |
        npm version ${{ needs.determine-version.outputs.new_version }} --no-git-tag-version
        
    - name: Update SDK versions
      run: |
        # Update TypeScript SDK version
        if [ -f "sdk/typescript-client/package.json" ]; then
          cd sdk/typescript-client
          npm version ${{ needs.determine-version.outputs.new_version }} --no-git-tag-version
          cd ../..
        fi
        
        # Update Rust SDK version
        if [ -f "sdk/rust-client/Cargo.toml" ]; then
          sed -i "s/^version = .*/version = \"${{ needs.determine-version.outputs.new_version }}\"/" sdk/rust-client/Cargo.toml
        fi
        
    - name: Commit version changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add package.json package-lock.json
        git add sdk/typescript-client/package.json sdk/typescript-client/package-lock.json
        git add sdk/rust-client/Cargo.toml
        git commit -m "chore: bump version to ${{ needs.determine-version.outputs.new_version }}"
        
    - name: Push changes
      run: |
        git push origin main
        
    - name: Create tag
      if: github.event.inputs.create_tag != 'false'
      run: |
        git tag -a "v${{ needs.determine-version.outputs.new_version }}" -m "Version ${{ needs.determine-version.outputs.new_version }}"
        git push origin "v${{ needs.determine-version.outputs.new_version }}"

  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: [determine-version, update-versions]
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        if [ -z "$PREVIOUS_TAG" ]; then
          # If no previous tag, get all commits
          RANGE="HEAD"
        else
          RANGE="$PREVIOUS_TAG..HEAD"
        fi
        
        # Generate changelog
        CHANGELOG="## Version ${{ needs.determine-version.outputs.new_version }} ($(date +%Y-%m-%d))
        
### Changes
"
        
        # Get commit messages
        COMMITS=$(git log "$RANGE" --pretty=format:"%h %s" | grep -v "chore: bump version")
        
        if [ -n "$COMMITS" ]; then
          echo "$COMMITS" | while read -r commit; do
            HASH=$(echo "$commit" | cut -d' ' -f1)
            MSG=$(echo "$commit" | cut -d' ' -f2-)
            
            # Categorize commits
            if echo "$MSG" | grep -q "^feat:"; then
              CHANGELOG="$CHANGELOG
- **New Feature**: ${MSG#feat: }"
            elif echo "$MSG" | grep -q "^fix:"; then
              CHANGELOG="$CHANGELOG
- **Bug Fix**: ${MSG#fix: }"
            elif echo "$MSG" | grep -q "^docs:"; then
              CHANGELOG="$CHANGELOG
- **Documentation**: ${MSG#docs: }"
            elif echo "$MSG" | grep -q "^style:"; then
              CHANGELOG="$CHANGELOG
- **Style**: ${MSG#style: }"
            elif echo "$MSG" | grep -q "^refactor:"; then
              CHANGELOG="$CHANGELOG
- **Refactor**: ${MSG#refactor: }"
            elif echo "$MSG" | grep -q "^test:"; then
              CHANGELOG="$CHANGELOG
- **Test**: ${MSG#test: }"
            elif echo "$MSG" | grep -q "^chore:"; then
              CHANGELOG="$CHANGELOG
- **Chore**: ${MSG#chore: }"
            else
              CHANGELOG="$CHANGELOG
- $MSG"
            fi
          done
        else
          CHANGELOG="$CHANGELOG
- Version bump"
        fi
        
        CHANGELOG="$CHANGELOG

### Installation

**TypeScript:**
\`\`\`bash
npm install kaldrix-sdk@${{ needs.determine-version.outputs.new_version }}
\`\`\`

**Rust:**
\`\`\`toml
[dependencies]
kaldrix-sdk = \"${{ needs.determine-version.outputs.new_version }}\"
\`\`\`

---
"
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [determine-version, generate-changelog]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.determine-version.outputs.new_version }}
        release_name: Release v${{ needs.determine-version.outputs.new_version }}
        body: ${{ needs.generate-changelog.outputs.changelog }}
        draft: false
        prerelease: ${{ github.event.inputs.prerelease == 'true' }}

  trigger-sdk-publish:
    name: Trigger SDK Publishing
    runs-on: ubuntu-latest
    needs: [determine-version, create-release]
    
    steps:
    - name: Trigger SDK generation and publishing
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'sdk-generation.yml',
            ref: 'main',
            inputs: {
              sdk_type: 'all',
              publish: 'true',
              version: '${{ needs.determine-version.outputs.new_version }}'
            }
          });

  notify-team:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [determine-version, create-release]
    if: always()
    
    steps:
    - name: Create release notification
      run: |
        echo "## Release Notification" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Version ${{ needs.determine-version.outputs.new_version }} Released!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Release Type:** ${{ needs.determine-version.outputs.release_type }}" >> $GITHUB_STEP_SUMMARY
        echo "**Previous Version:** ${{ needs.determine-version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
        echo "**New Version:** ${{ needs.determine-version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. 📦 SDK publishing in progress" >> $GITHUB_STEP_SUMMARY
        echo "2. 🧪 Integration tests running" >> $GITHUB_STEP_SUMMARY
        echo "3. 📋 Update documentation" >> $GITHUB_STEP_SUMMARY
        echo "4. 📢 Announce to team" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Links" >> $GITHUB_STEP_SUMMARY
        echo "- [Release Notes](https://github.com/${{ github.repository }}/releases/tag/v${{ needs.determine-version.outputs.new_version }})" >> $GITHUB_STEP_SUMMARY
        echo "- [Changelog](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)" >> $GITHUB_STEP_SUMMARY