name: Scheduled Maintenance & Health Checks

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
    # Run weekly on Sunday at 3 AM UTC for deep checks
    - cron: '0 3 * * 0'
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Check type'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - health
          - dependencies
          - security
          - cleanup

env:
  NODE_VERSION: '20'
  RUST_VERSION: 'stable'

jobs:
  health-check:
    name: API Health Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup database
      run: |
        npm run db:push
        npm run db:generate
        
    - name: Start API server
      run: |
        npm run dev &
        SERVER_PID=$!
        
        # Wait for server to be ready
        for i in {1..30}; do
          if curl -f http://localhost:3000/api/health &>/dev/null; then
            echo "Server is ready!"
            break
          fi
          sleep 2
        done
        
        echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
        
    - name: Run health checks
      run: |
        # Test health endpoint
        HEALTH_RESPONSE=$(curl -s http://localhost:3000/api/health)
        echo "Health response: $HEALTH_RESPONSE"
        
        if ! echo "$HEALTH_RESPONSE" | grep -q "status.*ok"; then
          echo "::error::Health check failed"
          exit 1
        fi
        
        # Test other critical endpoints
        curl -f http://localhost:3000/api/chat || echo "::warning::Chat endpoint check failed"
        curl -f http://localhost:3000/api/image || echo "::warning::Image endpoint check failed"
        curl -f http://localhost:3000/api/search || echo "::warning::Search endpoint check failed"
        
    - name: Stop API server
      if: env.SERVER_PID != ''
      run: |
        kill $SERVER_PID 2>/dev/null || true

  dependency-checks:
    name: Dependency Security Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check for outdated dependencies
      run: |
        echo "## Outdated Dependencies Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check main project dependencies
        echo "### Main Project Dependencies" >> $GITHUB_STEP_SUMMARY
        npm outdated --json | jq -r '.[] | "- \(.name): \(.current) → \(.latest)"' >> $GITHUB_STEP_SUMMARY || echo "No outdated dependencies found" >> $GITHUB_STEP_SUMMARY
        
        # Check TypeScript SDK dependencies
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### TypeScript SDK Dependencies" >> $GITHUB_STEP_SUMMARY
        cd sdk/typescript-client && npm outdated --json | jq -r '.[] | "- \(.name): \(.current) → \(.latest)"' >> ../../$GITHUB_STEP_SUMMARY || echo "No outdated dependencies found" >> ../../$GITHUB_STEP_SUMMARY
        cd ../..
        
        # Check SDK scripts dependencies
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### SDK Scripts Dependencies" >> $GITHUB_STEP_SUMMARY
        cd sdk/scripts && npm outdated --json | jq -r '.[] | "- \(.name): \(.current) → \(.latest)"' >> ../../$GITHUB_STEP_SUMMARY || echo "No outdated dependencies found" >> ../../$GITHUB_STEP_SUMMARY
        cd ../..
        
    - name: Run security audit
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Security Audit Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Audit main project
        echo "### Main Project Security Audit" >> $GITHUB_STEP_SUMMARY
        npm audit --audit-level moderate --json | jq -r '.advisories[]? | "- \(.module_name): \(.severity) - \(.title)"' >> $GITHUB_STEP_SUMMARY || echo "No security vulnerabilities found" >> $GITHUB_STEP_SUMMARY
        
        # Audit TypeScript SDK
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### TypeScript SDK Security Audit" >> $GITHUB_STEP_SUMMARY
        cd sdk/typescript-client && npm audit --audit-level moderate --json | jq -r '.advisories[]? | "- \(.module_name): \(.severity) - \(.title)"' >> ../../$GITHUB_STEP_SUMMARY || echo "No security vulnerabilities found" >> ../../$GITHUB_STEP_SUMMARY
        cd ../..
        
        # Audit SDK scripts
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### SDK Scripts Security Audit" >> $GITHUB_STEP_SUMMARY
        cd sdk/scripts && npm audit --audit-level moderate --json | jq -r '.advisories[]? | "- \(.module_name): \(.severity) - \(.title)"' >> ../../$GITHUB_STEP_SUMMARY || echo "No security vulnerabilities found" >> ../../$GITHUB_STEP_SUMMARY
        cd ../..

  cleanup-tasks:
    name: Cleanup Tasks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Clean up old branches
      run: |
        echo "## Branch Cleanup Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Find merged branches older than 30 days
        MERGED_BRANCHES=$(git branch -r --merged origin/main | grep -v 'origin/main' | grep -v 'origin/develop' | awk '{print $1}' | sed 's/origin\///')
        
        if [ -n "$MERGED_BRANCHES" ]; then
          echo "### Merged branches to clean up:" >> $GITHUB_STEP_SUMMARY
          echo "$MERGED_BRANCHES" | while read branch; do
            echo "- $branch" >> $GITHUB_STEP_SUMMARY
          done
        else
          echo "No merged branches to clean up" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Clean up old artifacts
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Artifact Cleanup Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # This would typically be done through GitHub API or GitHub CLI
        echo "Artifact cleanup would be performed via GitHub API" >> $GITHUB_STEP_SUMMARY
        
    - name: Clean up temporary files
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Temporary Files Cleanup" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Clean up node_modules in certain directories if they exist
        if [ -d "sdk/typescript-client/node_modules" ]; then
          echo "Cleaning up TypeScript SDK node_modules" >> $GITHUB_STEP_SUMMARY
          rm -rf sdk/typescript-client/node_modules
        fi
        
        if [ -d "sdk/scripts/node_modules" ]; then
          echo "Cleaning up SDK scripts node_modules" >> $GITHUB_STEP_SUMMARY
          rm -rf sdk/scripts/node_modules
        fi
        
        # Clean up build artifacts
        if [ -d "sdk/typescript-client/dist" ]; then
          echo "Cleaning up TypeScript SDK dist directory" >> $GITHUB_STEP_SUMMARY
          rm -rf sdk/typescript-client/dist
        fi
        
        if [ -d "sdk/rust-client/target" ]; then
          echo "Cleaning up Rust SDK target directory" >> $GITHUB_STEP_SUMMARY
          rm -rf sdk/rust-client/target
        fi
        
        echo "Cleanup completed" >> $GITHUB_STEP_SUMMARY

  backup-critical-files:
    name: Backup Critical Files
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create backup archive
      run: |
        echo "## Backup Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Create backup of critical files
        BACKUP_NAME="backup-$(date +%Y%m%d-%H%M%S)"
        mkdir -p /tmp/backup
        
        # Backup OpenAPI specification
        cp openapi.yaml /tmp/backup/
        echo "- Backed up OpenAPI specification" >> $GITHUB_STEP_SUMMARY
        
        # Backup SDK generation scripts
        cp -r sdk/scripts/ /tmp/backup/
        echo "- Backed up SDK generation scripts" >> $GITHUB_STEP_SUMMARY
        
        # Backup database schema
        cp prisma/schema.prisma /tmp/backup/
        echo "- Backed up database schema" >> $GITHUB_STEP_SUMMARY
        
        # Create archive
        cd /tmp
        tar -czf "${BACKUP_NAME}.tar.gz" backup/
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Backup Details" >> $GITHUB_STEP_SUMMARY
        echo "- Backup name: ${BACKUP_NAME}.tar.gz" >> $GITHUB_STEP_SUMMARY
        echo "- Size: $(du -h ${BACKUP_NAME}.tar.gz | cut -f1)" >> $GITHUB_STEP_SUMMARY
        echo "- Created: $(date)" >> $GITHUB_STEP_SUMMARY
        
    - name: Upload backup artifact
      uses: actions/upload-artifact@v4
      with:
        name: backup-${{ github.run_number }}
        path: /tmp/${BACKUP_NAME}.tar.gz
        retention-days: 30

  generate-maintenance-report:
    name: Generate Maintenance Report
    runs-on: ubuntu-latest
    needs: [health-check, dependency-checks, cleanup-tasks, backup-critical-files]
    if: always()
    
    steps:
    - name: Generate comprehensive maintenance report
      run: |
        echo "# Scheduled Maintenance Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Date:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "**Run ID:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## Executive Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Health check status
        if [ "${{ needs.health-check.result }}" = "success" ]; then
          echo "✅ **API Health**: All systems operational" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **API Health**: Issues detected - requires attention" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Security status
        if [ "${{ needs.dependency-checks.result }}" = "success" ]; then
          echo "✅ **Security**: No critical vulnerabilities found" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Security**: Vulnerabilities detected - review required" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Maintenance status
        if [ "${{ needs.cleanup-tasks.result }}" = "success" ]; then
          echo "✅ **Maintenance**: Cleanup tasks completed successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Maintenance**: Some cleanup tasks failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Backup status
        if [ "${{ needs.backup-critical-files.result }}" = "success" ]; then
          echo "✅ **Backup**: Critical files backed up successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Backup**: Backup failed - requires immediate attention" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Action Items" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.health-check.result }}" != "success" ]; then
          echo "- 🔴 **Urgent**: Investigate and fix API health issues" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.dependency-checks.result }}" != "success" ]; then
          echo "- 🟡 **High**: Review and address security vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "- 🟡 **Medium**: Update outdated dependencies" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.cleanup-tasks.result }}" != "success" ]; then
          echo "- 🟡 **Medium**: Review failed cleanup tasks" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.backup-critical-files.result }}" != "success" ]; then
          echo "- 🔴 **Urgent**: Fix backup process and retry" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Next Scheduled Maintenance" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Daily Health Check**: Tomorrow at 2:00 AM UTC" >> $GITHUB_STEP_SUMMARY
        echo "- **Weekly Deep Check**: Next Sunday at 3:00 AM UTC" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*Report generated automatically by GitHub Actions*" >> $GITHUB_STEP_SUMMARY