version: '3.8'

services:
<<<<<<< HEAD
  # Frontend Application (Production)
  frontend:
    image: ghcr.io/your-org/kaldrix:latest
    container_name: kaldrix-frontend-prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://api.kaldrix.com
      - NEXT_PUBLIC_WS_URL=wss://ws.kaldrix.com
    networks:
      - kaldrix-network
    restart: unless-stopped
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      rollback_config:
        parallelism: 0
        order: stop-first
    healthcheck:
      test: ["CMD", "curl", "-f", "https://kaldrix.com/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend API Server (Production)
  backend:
    image: ghcr.io/your-org/kaldrix-backend:latest
    container_name: kaldrix-backend-prod
    ports:
      - "3001:3001"
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://kaldrix:${DB_PASSWORD}@postgres-prod:5432/kaldrix_prod
      - REDIS_URL=redis://redis-prod:6379
      - JWT_SECRET=${JWT_SECRET}
      - BLOCKCHAIN_NODE_URL=http://blockchain-node-prod:8545
      - LOG_LEVEL=warn
      - SENTRY_DSN=${SENTRY_DSN}
    depends_on:
      - postgres-prod
      - redis-prod
      - blockchain-node-prod
    networks:
      - kaldrix-network
    restart: unless-stopped
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      rollback_config:
        parallelism: 0
        order: stop-first
    healthcheck:
      test: ["CMD", "curl", "-f", "https://api.kaldrix.com/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - /var/log/kaldrix:/app/logs
      - /var/data/kaldrix:/app/data
    secrets:
      - db_password
      - jwt_secret
      - sentry_dsn

  # Blockchain Core Node (Production)
  blockchain-node:
    image: ghcr.io/your-org/kaldrix-node:latest
    container_name: kaldrix-blockchain-prod
    ports:
      - "8545:8545"
      - "8546:8546"
      - "30303:30303"
    environment:
      - NODE_ENV=production
      - PORT=8545
      - DATABASE_URL=postgresql://kaldrix:${DB_PASSWORD}@postgres-prod:5432/kaldrix_prod
      - NETWORK_ID=1
      - CHAIN_ID=1
      - GAS_LIMIT=8000000
      - BLOCK_TIME=15000
      - LOG_LEVEL=warn
      - VALIDATOR_PRIVATE_KEY=${VALIDATOR_PRIVATE_KEY}
    depends_on:
      - postgres-prod
    networks:
      - kaldrix-network
    restart: unless-stopped
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
      rollback_config:
        parallelism: 0
        order: stop-first
    healthcheck:
      test: ["CMD", "curl", "-f", "https://node.kaldrix.com"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    volumes:
      - /var/data/kaldrix:/app/data
      - /var/keystore/kaldrix:/app/keystore
    secrets:
      - db_password
      - validator_private_key

  # PostgreSQL Database (Production)
  postgres-prod:
    image: postgres:15-alpine
    container_name: kaldrix-postgres-prod
    environment:
      - POSTGRES_DB=kaldrix_prod
      - POSTGRES_USER=kaldrix
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
    ports:
      - "5432:5432"
    networks:
      - kaldrix-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kaldrix -d kaldrix_prod"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./kaldr1/scripts/init-prod.sql:/docker-entrypoint-initdb.d/init.sql
    secrets:
      - db_password

  # Redis Cache (Production)
  redis-prod:
    image: redis:7-alpine
    container_name: kaldrix-redis-prod
    ports:
      - "6379:6379"
    networks:
      - kaldrix-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    volumes:
      - redis_prod_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    secrets:
      - redis_password

  # Prometheus Monitoring (Production)
  prometheus-prod:
    image: prom/prometheus:latest
    container_name: kaldrix-prometheus-prod
    ports:
      - "9090:9090"
    networks:
      - kaldrix-network
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus-prod.yml:/etc/prometheus/prometheus.yml
      - prometheus_prod_data:/prometheus
=======
  # Next.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kaldrix-app-prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - PORT=3000
    volumes:
      - ./public:/app/public:ro
    networks:
      - kaldrix-network
    depends_on:
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kaldrix.rule=Host(`kaldrix.io`) || Host(`www.kaldrix.io`)"
      - "traefik.http.routers.kaldrix.entrypoints=websecure"
      - "traefik.http.routers.kaldrix.tls.certresolver=myresolver"
      - "traefik.http.services.kaldrix.loadbalancer.server.port=3000"
      - "traefik.http.middlewares.kaldrix-headers.headers.customresponseheaders.Server=KALDRIX"
      - "traefik.http.middlewares.kaldrix-compress.compress=true"
      - "traefik.http.routers.kaldrix.middlewares=kaldrix-headers,kaldrix-compress"

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: kaldrix-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - kaldrix-network
    sysctls:
      - net.core.somaxconn=1024

  # Traefik Reverse Proxy
  traefik:
    image: traefik:v2.10
    container_name: kaldrix-traefik-prod
    restart: unless-stopped
    command:
      - "--api.insecure=false"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=${LETSENCRYPT_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--log.level=INFO"
      - "--accesslog=true"
      - "--accesslog.filepath=/var/log/traefik/access.log"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "letsencrypt_data:/letsencrypt"
      - "traefik_logs:/var/log/traefik"
    networks:
      - kaldrix-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.kaldrix.io`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=myresolver"
      - "traefik.http.routers.traefik.middlewares=traefik-auth"
      - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_AUTH}"

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: kaldrix-prometheus-prod
    restart: unless-stopped
>>>>>>> 28f03b7b7ee59195afe2e07f647ca52fd48e24fb
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
<<<<<<< HEAD
      - '--storage.tsdb.retention.time=720h'
      - '--web.enable-lifecycle'
      - '--web.external-url=https://prometheus.kaldrix.com'
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # Grafana Dashboard (Production)
  grafana-prod:
    image: grafana/grafana:latest
    container_name: kaldrix-grafana-prod
    ports:
      - "3001:3000"
    networks:
      - kaldrix-network
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=https://grafana.kaldrix.com
      - GF_SERVER_DOMAIN=grafana.kaldrix.com
    volumes:
      - grafana_prod_data:/var/lib/grafana
      - ./monitoring/grafana-prod/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana-prod/datasources:/etc/grafana/provisioning/datasources
    secrets:
      - grafana_password

  # Nginx Reverse Proxy (Production)
  nginx-prod:
    image: nginx:alpine
    container_name: kaldrix-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    networks:
      - kaldrix-network
    restart: unless-stopped
    volumes:
      - ./nginx/nginx-prod.conf:/etc/nginx/nginx.conf
      - /etc/letsencrypt:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
      - blockchain-node

  # Log Aggregation (Production)
  fluentd-prod:
    image: fluent/fluentd:v1.16-1
    container_name: kaldrix-fluentd-prod
    networks:
      - kaldrix-network
    restart: unless-stopped
    volumes:
      - ./fluentd/conf-prod:/fluentd/etc
      - /var/log/kaldrix:/fluentd/log
    ports:
      - "24224:24224"
      - "24224:24224/udp"

  # Backup Service
  backup:
    image: alpine:latest
    container_name: kaldrix-backup
    networks:
      - kaldrix-network
    volumes:
      - postgres_prod_data:/backup/postgres
      - /var/data/kaldrix:/backup/kaldrix
      - /var/keystore/kaldrix:/backup/keystore
    environment:
      - BACKUP_RETENTION_DAYS=30
      - S3_BUCKET=${S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    secrets:
      - aws_access_key_id
      - aws_secret_access_key
      - s3_bucket
    command: |
      sh -c "
        apk add --no-cache aws-cli
        while true; do
          echo 'Creating backup...'
          tar -czf /tmp/backup-\$(date +%Y%m%d-%H%M%S).tar.gz -C /backup .
          aws s3 cp /tmp/backup-\$(date +%Y%m%d-%H%M%S).tar.gz s3://\${S3_BUCKET}/backups/
          find /tmp -name 'backup-*.tar.gz' -mtime +\${BACKUP_RETENTION_DAYS} -delete
          echo 'Backup completed. Sleeping for 24 hours...'
          sleep 86400
        done
      "
=======
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - kaldrix-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.kaldrix.io`)"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls.certresolver=myresolver"
      - "traefik.http.routers.prometheus.middlewares=traefik-auth"

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: kaldrix-grafana-prod
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - kaldrix-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.kaldrix.io`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=myresolver"
      - "traefik.http.routers.grafana.middlewares=traefik-auth"

  # Node Exporter for system metrics
  node_exporter:
    image: prom/node-exporter:latest
    container_name: kaldrix-node-exporter-prod
    restart: unless-stopped
    command:
      - '--path.rootfs=/host'
    volumes:
      - '/:/host:ro,rslave'
    networks:
      - kaldrix-network

volumes:
  redis_data:
    driver: local
  letsencrypt_data:
    driver: local
  traefik_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
>>>>>>> 28f03b7b7ee59195afe2e07f647ca52fd48e24fb

networks:
  kaldrix-network:
    driver: bridge
    ipam:
      config:
<<<<<<< HEAD
        - subnet: 172.20.0.0/16

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  prometheus_prod_data:
    driver: local
  grafana_prod_data:
    driver: local

secrets:
  db_password:
    external: true
  jwt_secret:
    external: true
  sentry_dsn:
    external: true
  validator_private_key:
    external: true
  redis_password:
    external: true
  grafana_password:
    external: true
  aws_access_key_id:
    external: true
  aws_secret_access_key:
    external: true
  s3_bucket:
    external: true
=======
        - subnet: 172.20.0.0/16
>>>>>>> 28f03b7b7ee59195afe2e07f647ca52fd48e24fb
