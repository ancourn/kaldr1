apiVersion: v1
kind: Namespace
metadata:
  name: kaldrix
  labels:
    name: kaldrix
    app: kaldrix-blockchain
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kaldrix-config
  namespace: kaldrix
data:
  NODE_ENV: "production"
  LOG_LEVEL: "warn"
  NETWORK_ID: "1"
  CHAIN_ID: "1"
  GAS_LIMIT: "8000000"
  BLOCK_TIME: "15000"
---
apiVersion: v1
kind: Secret
metadata:
  name: kaldrix-secrets
  namespace: kaldrix
type: Opaque
data:
  # Base64 encoded values - replace with actual encoded secrets
  DATABASE_PASSWORD: <base64-encoded-password>
  JWT_SECRET: <base64-encoded-jwt-secret>
  REDIS_PASSWORD: <base64-encoded-redis-password>
  VALIDATOR_PRIVATE_KEY: <base64-encoded-private-key>
  SENTRY_DSN: <base64-encoded-sentry-dsn>
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: kaldrix
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: standard
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: kaldrix
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: kaldrix-data-pvc
  namespace: kaldrix
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: standard
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: kaldrix
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: kaldrix
spec:
  selector:
    app: redis
  ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: kaldrix
spec:
  selector:
    app: backend
  ports:
    - protocol: TCP
      port: 3001
      targetPort: 3001
      name: http
    - protocol: TCP
      port: 8080
      targetPort: 8080
      name: websocket
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: blockchain-service
  namespace: kaldrix
spec:
  selector:
    app: blockchain-node
  ports:
    - protocol: TCP
      port: 8545
      targetPort: 8545
      name: rpc
    - protocol: TCP
      port: 8546
      targetPort: 8546
      name: ws-rpc
    - protocol: TCP
      port: 30303
      targetPort: 30303
      name: p2p
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: kaldrix
spec:
  selector:
    app: frontend
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  namespace: kaldrix
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          value: kaldrix_prod
        - name: POSTGRES_USER
          value: kaldrix
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kaldrix-secrets
              key: DATABASE_PASSWORD
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - kaldrix
            - -d
            - kaldrix_prod
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - kaldrix
            - -d
            - kaldrix_prod
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
  namespace: kaldrix
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        command:
        - redis-server
        - --appendonly
        - --requirepass
        - $(REDIS_PASSWORD)
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kaldrix-secrets
              key: REDIS_PASSWORD
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: blockchain-deployment
  namespace: kaldrix
spec:
  replicas: 1
  selector:
    matchLabels:
      app: blockchain-node
  template:
    metadata:
      labels:
        app: blockchain-node
    spec:
      containers:
      - name: blockchain-node
        image: ghcr.io/your-org/kaldrix-node:latest
        envFrom:
        - configMapRef:
            name: kaldrix-config
        env:
        - name: DATABASE_URL
          value: "postgresql://kaldrix:$(DATABASE_PASSWORD)@postgres-service:5432/kaldrix_prod"
        - name: VALIDATOR_PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              name: kaldrix-secrets
              key: VALIDATOR_PRIVATE_KEY
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kaldrix-secrets
              key: DATABASE_PASSWORD
        ports:
        - containerPort: 8545
          name: rpc
        - containerPort: 8546
          name: ws-rpc
        - containerPort: 30303
          name: p2p
        volumeMounts:
        - name: kaldrix-data
          mountPath: /app/data
        resources:
          requests:
            memory: "4Gi"
            cpu: "2000m"
          limits:
            memory: "8Gi"
            cpu: "4000m"
        livenessProbe:
          httpGet:
            path: /
            port: 8545
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: 8545
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: kaldrix-data
        persistentVolumeClaim:
          claimName: kaldrix-data-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
  namespace: kaldrix
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
      - name: backend
        image: ghcr.io/your-org/kaldrix-backend:latest
        envFrom:
        - configMapRef:
            name: kaldrix-config
        env:
        - name: DATABASE_URL
          value: "postgresql://kaldrix:$(DATABASE_PASSWORD)@postgres-service:5432/kaldrix_prod"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@redis-service:6379"
        - name: BLOCKCHAIN_NODE_URL
          value: "http://blockchain-service:8545"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: kaldrix-secrets
              key: JWT_SECRET
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kaldrix-secrets
              key: DATABASE_PASSWORD
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kaldrix-secrets
              key: REDIS_PASSWORD
        - name: SENTRY_DSN
          valueFrom:
            secretKeyRef:
              name: kaldrix-secrets
              key: SENTRY_DSN
        ports:
        - containerPort: 3001
          name: http
        - containerPort: 8080
          name: websocket
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3001
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
  namespace: kaldrix
spec:
  replicas: 3
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: ghcr.io/your-org/kaldrix:latest
        env:
        - name: NODE_ENV
          valueFrom:
            configMapRef:
              name: kaldrix-config
              key: NODE_ENV
        - name: NEXT_PUBLIC_API_URL
          value: "https://api.kaldrix.com"
        - name: NEXT_PUBLIC_WS_URL
          value: "wss://ws.kaldrix.com"
        ports:
        - containerPort: 3000
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kaldrix-ingress
  namespace: kaldrix
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - kaldrix.com
    - api.kaldrix.com
    - ws.kaldrix.com
    - node.kaldrix.com
    secretName: kaldrix-tls
  rules:
  - host: kaldrix.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend-service
            port:
              number: 3000
  - host: api.kaldrix.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 3001
  - host: ws.kaldrix.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: backend-service
            port:
              number: 8080
  - host: node.kaldrix.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: blockchain-service
            port:
              number: 8545